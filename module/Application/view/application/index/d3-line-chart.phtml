<?php
$this->headStyle()->appendStyle(<<<CSS
    .chart text {
        fill: black;
        font: 12px sans-serif;
        text-anchor: begin;
    }

    .chart {
        border: 1px solid black;
    }

CSS
);

$this->inlineScript()->appendFile('https://cdnjs.cloudflare.com/ajax/libs/d3/4.4.1/d3.js');
$this->inlineScript()->appendScript(<<<JS
    jQuery(function() {

        // Set width and height of svg
        var svg = d3.select("svg");
        svg.attr('width', '800').attr('height', '240');

        // Define dimensions and margin of chart
        var margin = {"top": 20, "right": 80, "bottom": 30, "left": 40};
        var width = svg.attr("width") - margin.left - margin.right;
        var height = svg.attr("height") - margin.top - margin.bottom;
        console.log('Width:' + width + ', Height:' + height);

        // Create a time parser
        var parseTime = d3.timeParse("%Y-%m-%d");

        // Create a group node and move it
        var g = svg.append("g").attr("transform", "translate(" + margin.left + "," + margin.top + ")");

        // Define tree scales
        var x = d3.scaleTime().range([0, width]);
        var y = d3.scaleLinear().range([height, 0]);
        var z = d3.scaleOrdinal(d3.schemeCategory10);

        // Define a line
        var line = d3.line()
            .curve(d3.curveBasis)
            .x(function (d) { return x(d.date); })
            .y(function (d) { return y(d.temperature); });

        // Load json data and do something with it
        d3.json("d3-line-chart-data", function (datasets) {

            // Date strings are converted to unix timestamps
            datasets.forEach(function (dataset) {
                dataset.values.forEach(function (value) {
                    value.date = parseTime(value.date);
                });
            });

            // The three defined scales are adapted to the given data.
            x.domain([
                d3.min(datasets, function (c) { return d3.min(c.values, function (d) { return d.date; }) }),
                d3.max(datasets, function (c) { return d3.max(c.values, function (d) { return d.date; }) })
            ]);
            y.domain([
                d3.min(datasets, function (c) { return d3.min(c.values, function (d) { return d.temperature; }) }),
                d3.max(datasets, function (c) { return d3.max(c.values, function (d) { return d.temperature; }) })
            ]);
            z.domain(datasets.map(function (c) { return c.id; }));

            // Add axes
            g.append("g")
                .attr("class", "axis axis--x")
                .attr("transform", "translate(0," + height + ")")
                .call(d3.axisBottom(x));
            g.append("g")
                .attr("class", "axis axis--y")
                .call(d3.axisLeft(y))
                .append("text")
                    .attr("transform", "rotate(-90)")
                    .attr("y", 6)
                    .attr("dy", "0.71em")
                    .text("Temperature, ÂºC");

            // Add a group for every curve to svg.g and add class curve
            var curve = g.selectAll(".curve")
                .data(datasets)
                .enter().append("g")
                  .attr("class", "curve");

            // Add a path to every curve g
            curve.append("path")
                .attr("class", "line")
                .attr("d", function(d) { return line(d.values); })
                .style("stroke", function(d) { return z(d.id); })
                .style("fill", "none");

            // Add a text at the end of the path to every curve g
            curve.append("text")
                .datum(function (d) { return { id: d.id, value: d.values[d.values.length - 1]}; })
                .attr("transform", function (d) { return "translate(" + x(d.value.date) + "," + y(d.value.temperature) + ")"; })
                .attr("dx", 3)
                .attr("dy", "0.35em")
                .style("font", "10px sans-serif")
                .text(function (d) { return d.id; });
        });

    });

JS
);
?>
<div class="container-fluid">
    <div class="row">
        <div class="col-sm-12">
            <div style="padding-top: 1em; padding-bottom: 1em">
                <h2>Overview</h2>
            </div>
        </div>
    </div>
    <div class="row justify-content-center">
        <div class="col-sm-12">
            <svg class="chart"></svg>
        </div>
    </div>
</div>